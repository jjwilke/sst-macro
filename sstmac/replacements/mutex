#ifndef sstmac_mutex_header_included
#define sstmac_mutex_header_included

#ifndef SSTMAC_INSIDE_STL
#define SSTMAC_INSIDE_STL
#define MUTEX_OWNS_STL
#include <sstmac/replacements/sstmac_pthread_clear.h>
#include <sstmac/replacements/clear_symbol_macros.h>
#endif

#include <sstmac/software/process/std_mutex.h>

namespace std {

using mutex = sstmac::sw::std_mutex;

struct once_flag {
  constexpr once_flag() noexcept : called(false) {}
  bool called;
};

template< class Callable, class... Args >
void call_once(once_flag& flag, Callable&& f, Args&&... args ){
  if (!flag.called){
    f(std::forward<Args>(args)...);
  }
  flag.called = true;
}

}

#ifdef MUTEX_OWNS_STL
#undef MUTEX_OWNS_STL
#undef SSTMAC_INSIDE_STL
#include <sstmac/replacements/return_symbol_macros.h>
#include <sstmac/replacements/sstmac_pthread_return.h>
#endif

//clang is really bad about including this
//and it accidentally works because mutex brings this in
#include <climits>

#endif


