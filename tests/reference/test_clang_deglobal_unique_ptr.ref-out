
template <class T>
class unique_ptr {
};

template <class T, class... Args>
unique_ptr<T> make_unique(Args&&... args){
  return unique_ptr<T>();
}

struct A {
 template <class... Args>
 A(){}
};


static unique_ptr<A> myA = make_unique<A>(1,2,3,4,"I declare a thumb war");void* __ptr_xyzmyA = &myA; int __sizeof_xyzmyA = sizeof(myA); extern int __offset_xyzmyA; static sstmac::CppGlobal* myA_sstmac_ctor = sstmac::new_cpp_global<unique_ptr<  A>,false>(__offset_xyzmyA,std::function<void(void*)>([](void* ptr){  new (ptr) (unique_ptr<  A>)(make_unique<  A>(1, 2, 3, 4, "I declare a thumb war"));})); 
#include <sstmac/software/process/global.h>
#include <sstmac/software/process/memoize.h>

extern int __sizeof_xyzmyA;
extern void* __ptr_xyzmyA;
int __offset_xyzmyA = sstmac::GlobalVariable::init(__sizeof_xyzmyA,"xyzmyA",__ptr_xyzmyA,false);
