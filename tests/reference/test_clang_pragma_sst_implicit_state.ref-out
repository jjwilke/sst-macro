
enum implicit_states {
  null=0,
  length,
  size,
  temp
};



void memoFxn(int niter);

void memoFxn(int n){
  { sstmac_compute_memoize1("memoFxn",n); }for (int i=0; i < n; ++i);
}


void testFxn(int param){
}


void anotherTestFxn(int param){
  sstmac_set_implicit_compute_state2(size,param,temp,param); param += 5;
; sstmac_unset_implicit_compute_state2(size,temp);}

int fxn()
{
  int i=0;
  int mul = 0;
  double* x = new double[10];
  int* idx = new int[5];

 { sstmac_compute_memoize1("forloop",5); }













 sstmac_set_implicit_compute_state1(temp,mul); memoFxn(10); sstmac_unset_implicit_compute_state1(temp);;

 sstmac_set_implicit_compute_state1(length,5); memoFxn(i+12); sstmac_unset_implicit_compute_state1(length);;
  return 0;
}

char sstmac_appname_str[] = "pragma_test";
extern "C" int sstmac_user_main_pragma_test(){

  return 0;
}
#include <sstmac/software/process/global.h>
#include <sstmac/software/process/memoize.h>

static sstmac::Memoization memoize_forloop("forloop","linear");
static sstmac::Memoization memoize_memoFxn("memoFxn","linear");
int user_skeleton_main_init_fxn(const char* name, int (*foo)(int,char**));
extern "C" int sstmac_user_main_pragma_test(int argc, char** argv);
int pragma_test_sstmac_initer = user_skeleton_main_init_fxn("pragma_test",sstmac_user_main_pragma_test);

extern "C" const char exe_main_name[] = "pragma_test";
