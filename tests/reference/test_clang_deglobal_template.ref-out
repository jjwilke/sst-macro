
template <class T> class A {};
A<int> a;void* __ptr_a = &a; int __sizeof_a = sizeof(a); extern int __offset_a; sstmac::CppGlobal* a_sstmac_ctor = sstmac::new_cpp_global<A<int>,false>(__offset_a); 

void fxn()
{ char* sstmac_global_data = get_sstmac_global_data();decltype(a)* sstmac_a=(decltype(a)*)(sstmac_global_data + __offset_a); {
  auto ptr = &(*sstmac_a);
 }}
#include <sstmac/software/process/global.h>
#include <sstmac/software/process/memoize.h>

extern int __sizeof_a;
extern void* __ptr_a;
int __offset_a = sstmac::GlobalVariable::init(__sizeof_a,"a",__ptr_a,false);
